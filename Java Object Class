#Continue
- A continue keyword is used to immediately jump to the next iteration of the loop. 
  When continue used in the While Loop - it will jump to the boolean expression
                            For Loop - It will jump to update the variable.
                            
- A break keyword is used to immediately terminated and the program control resumes to the next statement following the loop.
  It is also used in the
  
  
     // julian leap = 1 not leap = 2 , Gregorian leap = 11 not leap = 22
        // Predicate<Integer> isJulianLeapYear  = i -> (i>1918)?(i%4==0):(i%400==0||(i%4==0&           &i%100!=0));
        Function<Integer,String> isLeapYear = i -> (i<1918)?((i%4==0)?"Julian Leap":"Julian Not Leap"):((i%4==0 && i%100!=0)?"Gregorian Leap":"Gregorian Not Leap");
        System.out.println(isLeapYear.apply(year));
        return "";


Creating java objects......this are the ways to do so:-------
    
  1.  Using the new keyword  -  The constructor gets called

  2.  Using newInstance() method of Class class  -  The constructor gets called, only no-arg constructor is called.
    Employee emp2 = (Employee) Class.forName("org.programming.mitra.exercises.Employee").newInstance();
      OR
    Employee emp2 = Employee.class.newInstance();
    "org.programming.mitra.exercises.Employee", full path is not required if the class is present in the java.lang package.
 
  3.  Using newInstance() method of Constructor class  -  The constructor gets called, any constructor from the class can be used to create the object
    Constructor<Employee> constructor = Employee.class.getConstructor(<T>.class);  for exe getContructor(String.class,int.class);
    Employee emp3 = constructor.newInstance("",2);
    
  4.  Using clone() method  -  No constructor call 
    Employee emp4 = (Employee) emp3.clone();
    If Employee class is not implementing the clonable object then you have to Implement the Clonable Marker Interface.
    
  5.  Using deserialization - No constructor call
    To deserialize an object, we need to implement a Serializable interface in our class. 
    ObjectInputStream in = new ObjectInputStream(new FileInputStream("data.obj"));
    Employee emp5 = (Employee) in.readObject();
  https://www.programmingmitra.com/2019/08/what-is-serialization-everything-about-java-serialization-explained-with-example.html
